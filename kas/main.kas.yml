# SPDX-License-Identifier: Apache-2.0
---
header:
  version: 15

env:
  BB_PRESSURE_MAX_CPU:
  BB_PRESSURE_MAX_IO:
  BB_PRESSURE_MAX_MEMORY:
  DISPLAY:
  ICECC_DISABLED:
  ICECC_PARALLEL_MAKE:

build_system: oe

distro: lamadist

defaults:
  repos:
    branch: scarthgap

repos:
  # Package layers
  meta-openembedded:
    url: 'https://github.com/openembedded/meta-openembedded.git'
    path: 'ext/meta-openembedded'
    layers :
      meta-oe:
      meta-filesystems:
      meta-networking:
      meta-perl:
      meta-python:

  meta-clang:
    url: 'https://github.com/kraj/meta-clang.git'
    path: 'ext/meta-clang'
    branch: master

  # Distro layers
  poky:
    url: 'https://git.yoctoproject.org/poky'
    path: 'ext/poky'
    layers :
      meta:
      meta-poky:
      meta-yocto-bsp:

  # TODO: Create custom distro layer
  meta-lamadist:
    #url: 'https://github.com/lamawithonel/meta-lamadist.git'
    path: 'meta-lamadist'
    #branch: main

  # Security layers
  meta-secure-core:
    url: 'https://github.com/Wind-River/meta-secure-core.git'
    path: 'ext/meta-secure-core'
    layers :
      meta-secure-core-common:
      meta-encrypted-storage:
      meta-integrity:
      meta-signing-key:
#      meta-efi-secure-boot:

  meta-selinux:
    url: 'https://git.yoctoproject.org/meta-selinux'
    path: 'ext/meta-selinux'

  meta-security:
    url: 'https://git.yoctoproject.org/meta-security'
    path: 'ext/meta-security'

  # Common feature layers
  meta-virtualization:
    url: 'https://git.yoctoproject.org/meta-virtualization'
    path: 'ext/meta-virtualization'

  meta-rauc:
    url: 'https://github.com/rauc/meta-rauc.git'
    path: 'ext/meta-rauc'

# TODO: Move board-specific settings into machine.conf Kas layers (e.g., TPM, UEFI, etc.)
# TODO: Figure out which local.conf options belong in a custom distro or image
local_conf_header:

#  Users: |
#    # FIXME: Figure out how to disable root using meta-secure-core
#    #EXTRA_USERS_PARAMS:append = " usermod -P P@$$w0rD root;"

  # meta-secure-core README example:
  #
  #  BBLAYERS ?= "\
  #    /path/to/yocto/meta \
  #    /path/to/yocto/meta-poky \
  #    /path/to/yocto/meta-yocto-bsp \
  #    /path/to/yocto/meta-secure-core/meta-secure-core-common \
  #    /path/to/yocto/meta-secure-core/meta-signing-key \
  #    /path/to/yocto/meta-secure-core/meta-tpm \
  #    /path/to/yocto/meta-secure-core/meta-tpm2 \
  #    /path/to/yocto/meta-secure-core/meta-efi-secure-boot \
  #    /path/to/yocto/meta-secure-core/meta-integrity \
  #    /path/to/yocto/meta-secure-core/meta-encrypted-storage \
  #    "
  #
  #  INITRAMFS_IMAGE = 'secure-core-image-initramfs'
  #  DISTRO_FEATURES_NATIVE:append = ' systemd ima tpm tpm2 efi-secure-boot luks'
  #  DISTRO_FEATURES:append = ' systemd ima tpm tpm2 efi-secure-boot luks modsign'
  #  MACHINE_FEATURES_NATIVE:append = ' efi'
  #  MACHINE_FEATURES:append = ' efi'
  #  PACKAGE_CLASSES = 'package_rpm'
  #  INHERIT += 'sign_rpm_ext'
  #  SECURE_CORE_IMAGE_EXTRA_INSTALL ?= "\
  #      packagegroup-efi-secure-boot \
  #      packagegroup-tpm \
  #      packagegroup-tpm2 \
  #      packagegroup-ima \
  #      packagegroup-luks \
  #  "
  #  DEBUG_FLAGS:forcevariable = ''
  #  IMAGE_INSTALL:append = ' kernel-image-bzimage'

  #meta-secure-core/meta-secure-core-common: |
    #INITRAMFS_IMAGE                     = 'secure-core-image-initramfs'

#   # TODO: Create custom signing keys and stash/retrieve them securely,
#   #       then uncomment and fill in meta-secure-core/meta-signing_keys
#   #       configuration.
#
#   # Prohibit using the sample keys for signing the images.
#   SIGNING_MODEL := 'user'
#
#   # UEFI Machine Owner Keys
#   MOK_SB_KEYS_DIR := ''
#
#   # Standard UEFI keys
#   UEFI_SB_KEYS_DIR := ''
#
#   # Kernel module signing keys
#   MODSIGN_KEYS_DIR := ''
#
#   # Integrity Measurement Architecture signing keys for use by RPM
#   IMA_KEYS_DIR := ''
#   SYSTEM_TRUSTED_KEYS_DIR := ''
#   SECONDARY_TRUSTED_KEYS_DIR := ''
#
#   # RPM package signing keys
#   RPM_KEYS_DIR := ''
#   RPM_GPG_NAME := ''
#
#   # Grub and SELoader keys
#   BOOT_KEYS_DIR := ''
#   GRUB_PUB_KEY := ''

#  meta-secure-core/meta-efi-secure-boot: |
#    DISTRO_FEATURES_NATIVE:append    = ' efi-secure-boot'
#    DISTRO_FEATURES:append           = ' efi-secure-boot modsign'
#    MACHINE_FEATURES_NATIVE:append   = ' efi'
#    MACHINE_FEATURES:append          = ' efi'
#    #SECURE_CORE_IMAGE_EXTRA_INSTALL += 'packagegroup-efi-secure-boot'

# TODO: Mark rootfs as read-only and implement dm-verity
# See meta-security comment above
#  dm-verity base: |
    # meta-intel
#    DISTRO_FEATURES:append                = ' security integrity'
#    DM_VERITY_IMAGE_TYPE                  = 'ext4'
#    IMAGE_TYPEDEP_wic                     = 'ext4'
#    IMAGE_CLASSES                        += 'dm-verity-img'
#    #IMAGE_FEATURES                       += 'read-only-rootfs'
#    #INITRAMFS_IMAGE_BUNDLE                = '1'
#    INITRAMFS_IMAGE                       = 'dm-verity-image-initramfs'
#    INITRAMFS_FSTYPES                     = 'cpio'
#    IMAGE_FSTYPES                        += 'ext4'

  Disk monitor: |
    BB_DISKMON_DIRS                     ??= " \
        STOPTASKS,${TMPDIR},1G,100K           \
        STOPTASKS,${DL_DIR},1G,100K           \
        STOPTASKS,${SSTATE_DIR},1G,100K       \
        STOPTASKS,/tmp,100M,100K              \
        HALT,${TMPDIR},100M,1K                \
        HALT,${DL_DIR},100M,1K                \
        HALT,${SSTATE_DIR},100M,1K            \
        HALT,/tmp,10M,1K"

  Build options: |
    # Build metadata
    INHERIT                              += 'buildhistory'
    BUILDHISTORY_COMMIT                   = '1'
    USER_CLASSES                         += 'buildstats buildstats-summary'

    # Icecream distributed build options
    INHERIT                              += 'icecc'
    ICECC_DISABLED                      ??= '1'
    ICECC_PARALLEL_MAKE                 ??= '-j 24'

  # FIXME: Create a private sstate-cache and hashserv server.  Trusting public servers is insecure.
  Cache: |
    BB_HASHSERVE = 'auto'
    BB_HASHSERVE_UPSTREAM = 'hashserv.yocto.io:8687'
    BB_SIGNATURE_HANDLER = 'OEEquivHash'
    SSTATE_DIR = '/home/builder/sstate-cache'
    SSTATE_MIRRORS = 'file://.* http://sstate.yoctoproject.org/PATH;downloadfilename=PATH'
